(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{376:function(t,s,a){"use strict";a.r(s);var e=a(45),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"promise浅析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise浅析"}},[t._v("#")]),t._v(" Promise浅析")]),t._v(" "),a("h3",{attrs:{id:"_1、定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、定义"}},[t._v("#")]),t._v(" 1、定义")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("Promise 是异步编程的一种解决方案，比传统的解决方案（回调函数和事件）更合理和更强大。")])])]),t._v(" "),a("p",[t._v("Promise本质是一个构造函数，其实例化的对象有且只有3种状态，分别是：")]),t._v(" "),a("ul",[a("li",[t._v("pending: 待定状态，也是初始状态")]),t._v(" "),a("li",[t._v("fulfilled: 已兑现，代表操作成功（通常也叫做resolved）")]),t._v(" "),a("li",[t._v("rejected: 已拒绝，代表操作失败")])]),t._v(" "),a("p",[t._v("Promise实例对象上的状态一经改变就不会再有变化，也就是只能从pending状态变为fulfilled状态或rejected状态，无法从fulfilled或rejected状态变为其他状态。")]),t._v(" "),a("h3",{attrs:{id:"_2、基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、基本用法"}},[t._v("#")]),t._v(" 2、基本用法")]),t._v(" "),a("p",[t._v("通常使用Promise对异步操作进行处理，在 "),a("strong",[a("code",[t._v("new Promise()")])]),t._v(" 的时候传入一个函数作为参数，这个函数的参数分别是 "),a("strong",[a("code",[t._v("resolve")])]),t._v(" 和 "),a("strong",[a("code",[t._v("reject")])]),t._v(" ，他们是两个函数，由JavaScript引擎提供，不用自己部署，他们的作用就是来改变Promise实例的状态的，"),a("strong",[a("code",[t._v("resolve")])]),t._v(" 是将Promise的状态从pending转变为fulfilled，在异步操作成功时调用，并且可以将异步操作的结果作为 "),a("strong",[a("code",[t._v("resolve")])]),t._v(" 的参数传递出去；"),a("strong",[a("code",[t._v("reject")])]),t._v(" 是将Promise的状态从pending转变为rejected，在异步操作失败是调用，并将异步操作的错误信息作为 "),a("strong",[a("code",[t._v("reject")])]),t._v(" 的参数传递出去。下面是一个常见的Promise实例创建代码：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" promise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里写异步操作")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*异步操作成功*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// value就是异步操作成功是返回的结果")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error就是异步操作失败的信息")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("上面代码得到的"),a("code",[t._v("promise")]),t._v("就是Promise的实例，该实例可以使用接下来介绍到的Promise原型上的"),a("code",[t._v("then")]),t._v("方法对异步结果进行操作。")]),t._v(" "),a("h3",{attrs:{id:"_3、promise-prototype-then"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、promise-prototype-then"}},[t._v("#")]),t._v(" 3、Promise.prototype.then()")]),t._v(" "),a("p",[t._v("Promise实例具有的 "),a("strong",[a("code",[t._v("then")])]),t._v(" 方法是定义在原型对象上的，它的作用是为Promise实例添加状态改变时的回调函数，"),a("strong",[a("code",[t._v("then")])]),t._v(" 方法可以接受2个回调函数作为参数（可选），在Promise实例状态改变为fulfilled或rejected的时候调用，他们都接收 "),a("strong",[a("code",[t._v("new Promise()")])]),t._v(" 的时候传出来的参数，下面是 "),a("strong",[a("code",[t._v("then")])]),t._v(" 方法的简单例子：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对成功结果进行处理")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对错误结果进行处理")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("上面代码中的promise是在"),a("strong",[t._v("基本用法")]),t._v("代码中的Promise实例，参数value和error就是resolve和reject函数传入的参数。"),a("strong",[a("code",[t._v("then")])]),t._v(" 方法中的回调函数在Promise实例状态发生改变的时候才（就）会执行，且 "),a("strong",[a("code",[t._v("then")])]),t._v(" 方法返回一个新的Promise实例，因此可以使用链式写法：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("   promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此时的res是上一个then方法的返回值 -- res.name")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("上面的代码使用 "),a("strong",[a("code",[t._v("then")])]),t._v(" 方法的链式写法，依次指定了两个回调函数。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。")]),t._v(" "),a("p",[t._v("另外Promise原型上还有 "),a("strong",[a("code",[t._v("catch")])]),t._v(" 方法，Promise.prototype.catch()方法是.then(null, rejection)或.then(undefined, rejection)的别名，用于指定发生错误时的回调函数，也可以链式调用。下面是MDN关于 "),a("strong",[a("code",[t._v("then")])]),t._v(" 方法链式调用的表示图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://media.prod.mdn.mozit.cloud/attachments/2014/09/18/8633/51a934a714e191f53e588bff719bc321/promises.png",alt:"MDN 图片"}})]),t._v(" "),a("h3",{attrs:{id:"_4、promise-prototype-catch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、promise-prototype-catch"}},[t._v("#")]),t._v(" 4、Promise.prototype.catch()")]),t._v(" "),a("p",[t._v("上面提到 "),a("strong",[a("code",[t._v("catch")])]),t._v(" 方法其实只是 "),a("strong",[a("code",[t._v("then")])]),t._v(" 方法不定义成功回调函数的特殊写法，最佳实践也是要求不要在 "),a("strong",[a("code",[t._v("then")])]),t._v(" 方法里面定义 rejected 状态的回调函数（即 "),a("strong",[a("code",[t._v("then")])]),t._v(" 的第二个参数），而是总使用 "),a("strong",[a("code",[t._v("catch")])]),t._v(" 方法，理由是使用 "),a("strong",[a("code",[t._v("catch")])]),t._v(" 方法可以捕获前面 "),a("strong",[a("code",[t._v("then")])]),t._v(" 方法执行中的错误，也更接近同步的写法 "),a("strong",[a("code",[t._v("（try/catch）")])]),t._v(" 。下面是 "),a("strong",[a("code",[t._v("catch")])]),t._v(" 方法的使用：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("  promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("res")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印捕获的错误（错误可能来自promise或then返回的Promise实例）")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])])]),a("p",[t._v("Promise 对象的错误具有“冒泡”性质，上面代码中的 "),a("strong",[a("code",[t._v("catch")])]),t._v(" 方法不仅可以捕获promise这个实例的错误，还能捕获 "),a("strong",[a("code",[t._v("then")])]),t._v(" 方法返回的Promise对象的错误。")]),t._v(" "),a("h3",{attrs:{id:"_5、promise-resolve"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、promise-resolve"}},[t._v("#")]),t._v(" 5、Promise.resolve()")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("Promise.resolve()")])]),t._v(" 方法用于将现有对象（非Promise对象）转换为Promise对象，其作用如下面代码所示：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("   Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[a("code",[t._v("Promise.resolve()")])]),t._v(" 的参数有以下几种常见情况：")]),t._v(" "),a("ol",[a("li",[t._v("参数是一个Promise对象：那么 "),a("strong",[a("code",[t._v("Promise.resolve()")])]),t._v(" 将不对参数做如何修改，原封不动的返回这个Promise对象。")]),t._v(" "),a("li",[t._v("参数是基本数据类型："),a("strong",[a("code",[t._v("Promise.resolve()")])]),t._v(" 方法会返回一个新的Promise对象，状态为fulfilled，也就是上面代码中表示的情况。")]),t._v(" "),a("li",[t._v("不带如何参数：同第二种情况一样返回一个状态为fulfilled的Promise对象，只是不带参数。")])]),t._v(" "),a("h3",{attrs:{id:"_6、promise-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、promise-all"}},[t._v("#")]),t._v(" 6、Promise.all()")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("Promise.all()")])]),t._v(" 方法用于将多个Promise实例包装成一个新的Promise实例。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("results")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//p1、p2、p3、p4的状态都为fulfilled才会进入此函数")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//p1、p2、p3、p4中有一个的状态为rejected就会进入此函数")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如上是 "),a("strong",[a("code",[t._v("Promise.all()")])]),t._v(" 的基本使用方法，它接收一个数组参数(也可以是一个Itetator)，数组中的每一项都是Promise对象，如果不是则会调用 "),a("strong",[a("code",[t._v("Promise.resolve()")])]),t._v(" 方法将其转化为Promise对象。\n"),a("strong",[a("code",[t._v("Promise.all()")])]),t._v(" 返回的实例的状态由其参数的状态所决定，如上面代码中 "),a("strong",[a("code",[t._v("p")])]),t._v(" 的状态由 "),a("strong",[a("code",[t._v("p1、p2、p3、p4")])]),t._v(" 共同决定，只有这四个的状态都为 "),a("strong",[a("code",[t._v("fulfilled")])]),t._v(" ，"),a("strong",[a("code",[t._v("p")])]),t._v(" 的状态才为 "),a("strong",[a("code",[t._v("fulfilled")])]),t._v("，此时 "),a("strong",[a("code",[t._v("p1、p2、p3、p4")])]),t._v(" 各自的返回值组成一个数组，这个数组作为参数传入 "),a("strong",[a("code",[t._v("p")])]),t._v(" 的成功回调中。当 "),a("strong",[a("code",[t._v("p1、p2、p3、p4")])]),t._v(" 中有一个的状态为 "),a("strong",[a("code",[t._v("rejected")])]),t._v(" ，则 "),a("strong",[a("code",[t._v("p")])]),t._v(" 的状态为 "),a("strong",[a("code",[t._v("rejected")])]),t._v("，此时第一个被 "),a("strong",[a("code",[t._v("rejected")])]),t._v(" 的实例的返回值作为参数传入 "),a("strong",[a("code",[t._v("p")])]),t._v(" 的错误回调中。")])])}),[],!1,null,null,null);s.default=n.exports}}]);